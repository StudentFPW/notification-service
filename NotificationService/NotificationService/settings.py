"""
Django settings for NotificationService project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ra&p)3)p(wg70geq=3yklcnqkak)=h4ysg)_^j6oztc3hfl=rh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mailing',
    'rest_framework',
    'drf_yasg',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'NotificationService.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NotificationService.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# The `DATABASES` dictionary in Django settings is used to configure the database connection for the project. In this
# case, it is configuring a PostgreSQL database with the following details:
# DATABASES = {  # USE THIS CONFIGURATION FOR REAL USE
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'railway',
#         'USER': 'postgres',
#         'PASSWORD': 'sZOSQ1yHIBOfUcYSnaBb',
#         'HOST': 'containers-us-west-134.railway.app',
#         'PORT': '6575',
#     }
# }

DATABASES = {'default': {  # FOR TESTING!!!
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': BASE_DIR / 'db.sqlite3',
}}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# The code configuring Celery, a distributed task queue system, to use Redis as the message broker and
# result backend.
CELERY_BROKER_URL = 'redis://default:7u3XVAm7V1s3DUfu7IZ3YIisotyvVDTy' \
                    '@redis-10608.c90.us-east-1-3.ec2.cloud.redislabs.com:10608'
CELERY_RESULT_BACKEND = 'redis://default:7u3XVAm7V1s3DUfu7IZ3YIisotyvVDTy' \
                        '@redis-10608.c90.us-east-1-3.ec2.cloud.redislabs.com:10608'

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

SITE_ID = 1

# The `AUTHENTICATION_BACKENDS` setting in Django is used to specify the authentication backends that should be used for
# user authentication.
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# These settings are related to user authentication and account management in Django.
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_LOGIN_ON_GET = True
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# The `SOCIALACCOUNT_PROVIDERS` setting in Django is used to configure the authentication provider for social accounts.
# In this case, it is configuring the Google authentication provider.
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {
            'client_id': '646255273180-an57oo4m7m5pthhopjf1b0t7air51ce3.apps.googleusercontent.com',
            'secret': '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',
            'key': ''
        }
    }
}

# # The line `ACCOUNT_FORMS = {"signup": "mailing.forms.CustomSignupForm"}` is configuring the form to be used for user
# # signup in the Django allauth package.
# ACCOUNT_FORMS = {"signup": "mailing.forms.CustomSignupForm"}

# The `LOGGING` configuration in Django settings is used to configure the logging behavior of the application. It allows
# you to specify various loggers, handlers, filters, and formatters to control how log messages are processed and where
# they are outputted.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'simple_0': {
            "format": "[{asctime}], [{levelname}], [{message}]",
            "style": "{",
        },
        'simple_1': {
            "format": "[{asctime}], [{levelname}], [{module}], [{message}]",
            "style": "{",
        },
        'simple_2': {
            "format": "[{asctime}], [{levelname}], [{message}], [{pathname}]",
            "style": "{",
        },
        'simple_3': {
            "format": "[{asctime}], [{levelname}], [{message}], [{pathname}], [{exc_info}]",
            "style": "{",
        },
    },

    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },

    'handlers': {
        'console_I': {  # WORKING ONLY ON DEBUG = False
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'simple_1',
            'filters': ['require_debug_false'],
        },
        'console_D': {  # WORKING ONLY ON DEBUG = True
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple_0',
            'filters': ['require_debug_true'],
        },
        'console_W': {  # WORKING ONLY ON DEBUG = True
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'simple_2',
            'filters': ['require_debug_true'],
        },
        'console_E_C': {  # WORKING ONLY ON DEBUG = True
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'simple_3',
            'filters': ['require_debug_true'],
        },
        'console_E_C_TO_F': {  # WORKING EVERY
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'simple_3'
        },
        'security': {  # WORKING EVERY
            # 'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'simple_1'
        },
        'mail_001': {  # WORKING ONLY ON DEBUG = False
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'simple_2',
            'filters': ['require_debug_false'],
            # "include_html": True  # If you need html problem type
        },
    },

    'loggers': {
        'django': {
            'handlers': ['console_I', 'console_D', 'console_W', 'console_E_C'],
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console_E_C_TO_F', 'mail_001'],
            'propagate': True,
        },
        'django.server': {
            'handlers': ['console_E_C_TO_F', 'mail_001'],
            'propagate': True,
        },
        'django.template': {
            'handlers': ['console_E_C_TO_F'],
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console_E_C_TO_F'],
            'propagate': True,
        },
    }
}
